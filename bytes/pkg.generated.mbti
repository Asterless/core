// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/core/bytes"

// Values
fn default() -> Bytes

// Errors

// Types and methods
fn Bytes::add(Bytes, Bytes) -> Bytes // from trait `Add`
fn Bytes::default() -> Bytes // from trait `Default`
fn Bytes::find(Bytes, BytesView) -> Int?
#alias(of, deprecated)
#as_free_fn(of, deprecated)
#as_free_fn
fn Bytes::from_array(ArrayView[Byte]) -> Bytes
#as_free_fn
fn Bytes::from_fixedarray(FixedArray[Byte], len? : Int) -> Bytes
#as_free_fn
fn Bytes::from_iter(Iter[Byte]) -> Bytes
#as_free_fn
fn Bytes::from_iterator(Iterator[Byte]) -> Bytes
fn Bytes::get(Bytes, Int) -> Byte?
fn Bytes::hash(Bytes) -> Int // from trait `Hash`
fn Bytes::hash_combine(Bytes, Hasher) -> Unit // from trait `Hash`
fn Bytes::iter(Bytes) -> Iter[Byte]
fn Bytes::iter2(Bytes) -> Iter2[Int, Byte]
fn Bytes::iterator(Bytes) -> Iterator[Byte]
fn Bytes::iterator2(Bytes) -> Iterator2[Int, Byte]
#deprecated
fn Bytes::op_add(Bytes, Bytes) -> Bytes // from trait `Add`
fn Bytes::output(Bytes, &Logger) -> Unit // from trait `Show`
fn Bytes::repeat(Bytes, Int) -> Bytes
fn Bytes::rev_find(Bytes, BytesView) -> Int?
fn Bytes::to_array(Bytes) -> Array[Byte]
fn Bytes::to_fixedarray(Bytes, len? : Int) -> FixedArray[Byte]
fn Bytes::to_json(Bytes) -> Json // from trait `ToJson`
fn Bytes::to_string(Bytes) -> String // from trait `Show`
fn Bytes::unsafe_extract_bit(Bytes, Int, Int) -> UInt
fn Bytes::unsafe_extract_byte(Bytes, Int, Int) -> UInt
fn Bytes::unsafe_extract_bytesview(Bytes, Int, Int) -> BytesView
fn Bytes::unsafe_extract_uint64_be(Bytes, Int, Int) -> UInt64
fn Bytes::unsafe_extract_uint64_le(Bytes, Int, Int) -> UInt64
fn Bytes::unsafe_extract_uint_be(Bytes, Int, Int) -> UInt
fn Bytes::unsafe_extract_uint_le(Bytes, Int, Int) -> UInt
fn Bytes::unsafe_read_uint16_be(Bytes, Int) -> UInt16
fn Bytes::unsafe_read_uint16_le(Bytes, Int) -> UInt16
fn Bytes::unsafe_read_uint32_be(Bytes, Int) -> UInt
fn Bytes::unsafe_read_uint32_le(Bytes, Int) -> UInt
fn Bytes::unsafe_read_uint64_be(Bytes, Int) -> UInt64
fn Bytes::unsafe_read_uint64_le(Bytes, Int) -> UInt64
impl Add for Bytes
impl Default for Bytes
impl Hash for Bytes
impl Show for Bytes
impl ToJson for Bytes

fn BytesView::data(Self) -> Bytes
fn BytesView::find(Self, Self) -> Int?
fn BytesView::iter(Self) -> Iter[Byte]
fn BytesView::iterator(Self) -> Iterator[Byte]
fn BytesView::iterator2(Self) -> Iterator2[Int, Byte]
fn BytesView::output(Self, &Logger) -> Unit // from trait `Show`
fn BytesView::rev_find(Self, Self) -> Int?
fn BytesView::start_offset(Self) -> Int
fn BytesView::to_bytes(Self) -> Bytes
fn BytesView::to_double_be(Self) -> Double
fn BytesView::to_double_le(Self) -> Double
fn BytesView::to_float_be(Self) -> Float
fn BytesView::to_float_le(Self) -> Float
fn BytesView::to_int64_be(Self) -> Int64
fn BytesView::to_int64_le(Self) -> Int64
fn BytesView::to_int_be(Self) -> Int
fn BytesView::to_int_le(Self) -> Int
fn BytesView::to_json(Self) -> Json // from trait `ToJson`
fn BytesView::to_string(Self) -> String // from trait `Show`
fn BytesView::to_uint64_be(Self) -> UInt64
fn BytesView::to_uint64_le(Self) -> UInt64
fn BytesView::unsafe_extract_bit(Self, Int, Int) -> UInt
fn BytesView::unsafe_extract_byte(Self, Int, Int) -> UInt
fn BytesView::unsafe_extract_bytesview(Self, Int, Int) -> Self
fn BytesView::unsafe_extract_uint64_be(Self, Int, Int) -> UInt64
fn BytesView::unsafe_extract_uint64_le(Self, Int, Int) -> UInt64
fn BytesView::unsafe_extract_uint_be(Self, Int, Int) -> UInt
fn BytesView::unsafe_extract_uint_le(Self, Int, Int) -> UInt
fn BytesView::unsafe_read_uint16_be(Self, Int) -> UInt16
fn BytesView::unsafe_read_uint16_le(Self, Int) -> UInt16
fn BytesView::unsafe_read_uint32_be(Self, Int) -> UInt
fn BytesView::unsafe_read_uint32_le(Self, Int) -> UInt
fn BytesView::unsafe_read_uint64_be(Self, Int) -> UInt64
fn BytesView::unsafe_read_uint64_le(Self, Int) -> UInt64
impl Show for BytesView
impl ToJson for BytesView

// Type aliases
pub typealias BytesView as View

// Traits

